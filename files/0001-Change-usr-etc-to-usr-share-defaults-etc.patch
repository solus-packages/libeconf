From 8ef9f017051cfbc6d4af6d5f1ed4174915272709 Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Mon, 11 Sep 2023 22:29:31 -0500
Subject: [PATCH] Change /usr/etc to /usr/share/defaults/etc

---
 doc/man/econftool.8   |  2 +-
 doc/man/libeconf.3    | 30 +++++++++++++++---------------
 docs/libeconf_8h.html | 16 ++++++++--------
 example/example.c     |  2 +-
 include/libeconf.h    | 26 +++++++++++++-------------
 lib/libeconf.c        |  8 ++++----
 lib/mergefiles.c      |  2 +-
 util/econftool.c      |  4 ++--
 8 files changed, 45 insertions(+), 45 deletions(-)

diff --git a/doc/man/econftool.8 b/doc/man/econftool.8
index 5887952..c88af64 100644
--- a/doc/man/econftool.8
+++ b/doc/man/econftool.8
@@ -9,7 +9,7 @@ Tool which allows to easily manage the configuration file snippets.
 .SH COMMANDS
 .TP
 .B show
-Reads all snippets for <filename>.conf (in /usr/etc and /etc),
+Reads all snippets for <filename>.conf (in /usr/share/defaults/etc and /etc),
 and prints all groups,keys and their values.
 The root directories is /. It can be set by the environment variable $ECONFTOOL_ROOT.
 .TP
diff --git a/doc/man/libeconf.3 b/doc/man/libeconf.3
index cbb3996..37860c2 100644
--- a/doc/man/libeconf.3
+++ b/doc/man/libeconf.3
@@ -127,7 +127,7 @@ exists:
 .ti -1c
 .RI "\fBeconf_err\fP \fBeconf_readDirs\fP (\fBeconf_file\fP **key_file, const char *usr_conf_dir, const char *etc_conf_dir, const char *project_name, const char *config_suffix, const char *delim, const char *comment)"
 .br
-.RI "Evaluating key/values of a given configuration by reading and merging all needed/available files in two different directories (normally in /usr/etc and /etc)\&. "
+.RI "Evaluating key/values of a given configuration by reading and merging all needed/available files in two different directories (normally in /usr/share/defaults/etc and /etc)\&. "
 .ti -1c
 .RI "\fBeconf_err\fP \fBeconf_readDirsWithCallback\fP (\fBeconf_file\fP **key_file, const char *usr_conf_dir, const char *etc_conf_dir, const char *project_name, const char *config_suffix, const char *delim, const char *comment, bool (*callback)(const char *filename, const void *data), const void *callback_data)"
 .br
@@ -135,7 +135,7 @@ exists:
 .ti -1c
 .RI "\fBeconf_err\fP \fBeconf_readDirsHistory\fP (\fBeconf_file\fP ***key_files, size_t *size, const char *usr_conf_dir, const char *etc_conf_dir, const char *project_name, const char *config_suffix, const char *delim, const char *comment)"
 .br
-.RI "Evaluating key/values for every given configuration files in two different directories (normally in /usr/etc and /etc)\&. "
+.RI "Evaluating key/values for every given configuration files in two different directories (normally in /usr/share/defaults/etc and /etc)\&. "
 .ti -1c
 .RI "\fBeconf_err\fP \fBeconf_readDirsHistoryWithCallback\fP (\fBeconf_file\fP ***key_files, size_t *size, const char *usr_conf_dir, const char *etc_conf_dir, const char *project_name, const char *config_suffix, const char *delim, const char *comment, bool (*callback)(const char *filename, const void *data), const void *callback_data)"
 .br
@@ -534,7 +534,7 @@ Usage:
 econf_file *key_file_1 = NULL, *key_file_2 = NULL, *key_file_ret = NULL
 econf_err error;
 
-error = econf_readFile (&key_file1, "/usr/etc/test\&.conf", "=", "#");
+error = econf_readFile (&key_file1, "/usr/share/defaults/etc/test\&.conf", "=", "#");
 error = econf_readFile (&key_file2, /etc/test\&.conf", "=", "#");
 error = econf_mergeFiles (&key_file_ret, key_file_1, key_file_2);
 
@@ -548,13 +548,13 @@ econf_free (key_file_2);
 .SS "\fBeconf_err\fP econf_readDirs (\fBeconf_file\fP ** key_file, const char * usr_conf_dir, const char * etc_conf_dir, const char * project_name, const char * config_suffix, const char * delim, const char * comment)"
 
 .PP
-Evaluating the content of a given configuration file by reading all needed/available files in two different directories (normally in /usr/etc and /etc)\&. 
+Evaluating the content of a given configuration file by reading all needed/available files in two different directories (normally in /usr/share/defaults/etc and /etc)\&. 
 .PP
 \fBParameters:\fP
 .RS 4
 \fIkey_file\fP content of parsed file(s) 
 .br
-\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/etc') 
+\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/share/defaults/etc') 
 .br
 \fIetc_conf_dir\fP absolute path of the second directory (normally '/etc')
 .br
@@ -572,7 +572,7 @@ Evaluating the content of a given configuration file by reading all needed/avail
 econf_err ECONF_SUCCESS or error code
 .RE
 .PP
-Example: Reading content of example\&.conf in /usr/etc and /etc directory\&. 
+Example: Reading content of example\&.conf in /usr/share/defaults/etc and /etc directory\&. 
 .PP
 .nf
 #include "libeconf\&.h"
@@ -581,7 +581,7 @@ econf_file *key_file = NULL;
 econf_err error;
 
 error = econf_readDirs (&key_file,
-                        "/usr/etc",
+                        "/usr/share/defaults/etc",
                         "/etc",
                         "example",
                         "conf",
@@ -595,13 +595,13 @@ econf_free (key_file);
 .SS "\fBeconf_err\fP econf_readDirsWithCallback (\fBeconf_file\fP ** key_file, const char * usr_conf_dir, const char * etc_conf_dir, const char * project_name, const char * config_suffix, const char * delim, const char * comment, bool (*callback)(const char *filename, const void *data), const void *callback_data)"
 
 .PP
-Evaluating the content of a given configuration file by reading all needed/available files in two different directories (normally in /usr/etc and /etc)\&. For each parsed file the user defined function will be called in order e.g. to check the correct file permissions\&.
+Evaluating the content of a given configuration file by reading all needed/available files in two different directories (normally in /usr/share/defaults/etc and /etc)\&. For each parsed file the user defined function will be called in order e.g. to check the correct file permissions\&.
 .PP
 \fBParameters:\fP
 .RS 4
 \fIkey_file\fP content of parsed file(s)
 .br
-\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/etc')
+\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/share/defaults/etc')
 .br
 \fIetc_conf_dir\fP absolute path of the second directory (normally '/etc')
 .br
@@ -623,7 +623,7 @@ Evaluating the content of a given configuration file by reading all needed/avail
 econf_err ECONF_SUCCESS or error code
 .RE
 .PP
-Example: Reading content of example\&.conf in /usr/etc and /etc directory\&.
+Example: Reading content of example\&.conf in /usr/share/defaults/etc and /etc directory\&.
 .PP
 .nf
 #include "libeconf.h"
@@ -637,7 +637,7 @@ econf_file *key_file = NULL;
 econf_err error;
 
 error = econf_readDirsWithCallback (&key_file,
-                                  "/usr/etc",
+                                  "/usr/share/defaults/etc",
                                   "/etc",
                                   "example",
                                   "conf",
@@ -652,7 +652,7 @@ econf_free (key_file);
 .SS "\fBeconf_err\fP econf_readDirsHistory (\fBeconf_file\fP *** key_files, size_t * size, const char * usr_conf_dir, const char * etc_conf_dir, const char * project_name, const char * config_suffix, const char * delim, const char * comment)"
 
 .PP
-Evaluating key/values for every given configuration files in two different directories (normally in /usr/etc and /etc)\&. Returns a list of read configuration files and their values\&.
+Evaluating key/values for every given configuration files in two different directories (normally in /usr/share/defaults/etc and /etc)\&. Returns a list of read configuration files and their values\&.
 .PP
 \fBParameters:\fP
 .RS 4
@@ -660,7 +660,7 @@ Evaluating key/values for every given configuration files in two different direc
 .br
 \fIsize\fP Size of the evaluated key_files list\&.
 .br
-\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/etc')
+\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/share/defaults/etc')
 .br
 \fIetc_conf_dir\fP absolute path of the second directory (normally '/etc')
 .br
@@ -682,7 +682,7 @@ econf_err ECONF_SUCCESS or error code
 .SS "\fBeconf_err\fP econf_readDirsHistoryWithCallback (\fBeconf_file\fP *** key_files, size_t * size, const char * usr_conf_dir, const char * etc_conf_dir, const char * project_name, const char * config_suffix, const char * delim, const char * comment, bool (*callback)(const char *filename, const void *data), const void *callback_data)"
 
 .PP
-Evaluating key/values for every given configuration files in two different directories (normally in /usr/etc and /etc)\&. For each parsed file the user defined function will be called in order e.g. to check the correct file permissions\&. Returns a list of read configuration files and their values\&.
+Evaluating key/values for every given configuration files in two different directories (normally in /usr/share/defaults/etc and /etc)\&. For each parsed file the user defined function will be called in order e.g. to check the correct file permissions\&. Returns a list of read configuration files and their values\&.
 .PP
 \fBParameters:\fP
 .RS 4
@@ -690,7 +690,7 @@ Evaluating key/values for every given configuration files in two different direc
 .br
 \fIsize\fP Size of the evaluated key_files list\&.
 .br
-\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/etc')
+\fIusr_conf_dir\fP absolute path of the first directory (normally '/usr/share/defaults/etc')
 .br
 \fIetc_conf_dir\fP absolute path of the second directory (normally '/etc')
 .br
diff --git a/docs/libeconf_8h.html b/docs/libeconf_8h.html
index ea2d474..358c92b 100644
--- a/docs/libeconf_8h.html
+++ b/docs/libeconf_8h.html
@@ -130,10 +130,10 @@ Functions</h2></td></tr>
 <tr class="memdesc:a2aba75b3474b33173edbc0f80b2e8a79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Merge the contents of two key_files objects.  <a href="#a2aba75b3474b33173edbc0f80b2e8a79">More...</a><br /></td></tr>
 <tr class="separator:a2aba75b3474b33173edbc0f80b2e8a79"><td class="memSeparator" colspan="2">&#160;</td></tr>
 <tr class="memitem:a7ff92b0fb657aa21220a89a0fcb59227"><td class="memItemLeft" align="right" valign="top"><a class="el" href="libeconf_8h.html#a30cb4e6c5ce4daa333646b23b20caa0a">econf_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="libeconf_8h.html#a7ff92b0fb657aa21220a89a0fcb59227">econf_readDirs</a> (<a class="el" href="libeconf_8h.html#a0d29e6d5c6c6d151bb3edc54019c8735">econf_file</a> **key_file, const char *usr_conf_dir, const char *etc_conf_dir, const char *project_name, const char *config_suffix, const char *delim, const char *comment)</td></tr>
-<tr class="memdesc:a7ff92b0fb657aa21220a89a0fcb59227"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluating key/values of a given configuration by reading and merging all needed/available files in two different directories (normally in /usr/etc and /etc).  <a href="#a7ff92b0fb657aa21220a89a0fcb59227">More...</a><br /></td></tr>
+<tr class="memdesc:a7ff92b0fb657aa21220a89a0fcb59227"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluating key/values of a given configuration by reading and merging all needed/available files in two different directories (normally in /usr/share/defaults/etc and /etc).  <a href="#a7ff92b0fb657aa21220a89a0fcb59227">More...</a><br /></td></tr>
 <tr class="separator:a7ff92b0fb657aa21220a89a0fcb59227"><td class="memSeparator" colspan="2">&#160;</td></tr>
 <tr class="memitem:a55faa39cd3887073d1aaba364bd09f94"><td class="memItemLeft" align="right" valign="top"><a class="el" href="libeconf_8h.html#a30cb4e6c5ce4daa333646b23b20caa0a">econf_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="libeconf_8h.html#a55faa39cd3887073d1aaba364bd09f94">econf_readDirsHistory</a> (<a class="el" href="libeconf_8h.html#a0d29e6d5c6c6d151bb3edc54019c8735">econf_file</a> ***key_files, size_t *size, const char *usr_conf_dir, const char *etc_conf_dir, const char *project_name, const char *config_suffix, const char *delim, const char *comment)</td></tr>
-<tr class="memdesc:a55faa39cd3887073d1aaba364bd09f94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluating key/values for every given configuration files in two different directories (normally in /usr/etc and /etc).  <a href="#a55faa39cd3887073d1aaba364bd09f94">More...</a><br /></td></tr>
+<tr class="memdesc:a55faa39cd3887073d1aaba364bd09f94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluating key/values for every given configuration files in two different directories (normally in /usr/share/defaults/etc and /etc).  <a href="#a55faa39cd3887073d1aaba364bd09f94">More...</a><br /></td></tr>
 <tr class="separator:a55faa39cd3887073d1aaba364bd09f94"><td class="memSeparator" colspan="2">&#160;</td></tr>
 <tr class="memitem:a94f42f580d8c9dff8cdb01a5c91bb5ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="libeconf_8h.html#a30cb4e6c5ce4daa333646b23b20caa0a">econf_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="libeconf_8h.html#a94f42f580d8c9dff8cdb01a5c91bb5ec">econf_newKeyFile</a> (<a class="el" href="libeconf_8h.html#a0d29e6d5c6c6d151bb3edc54019c8735">econf_file</a> **result, char delimiter, char comment)</td></tr>
 <tr class="memdesc:a94f42f580d8c9dff8cdb01a5c91bb5ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new econf_file object.  <a href="#a94f42f580d8c9dff8cdb01a5c91bb5ec">More...</a><br /></td></tr>
@@ -500,7 +500,7 @@ Functions</h2></td></tr>
   </dd>
 </dl>
 <dl class="section return"><dt>Returns</dt><dd>econf_err ECONF_SUCCESS or error code</dd></dl>
-<p>Usage: </p><div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="libeconf_8h.html">libeconf.h</a>&quot;</span></div><div class="line"></div><div class="line"><a class="code" href="libeconf_8h.html#a0d29e6d5c6c6d151bb3edc54019c8735">econf_file</a> *key_file_1 = NULL, *key_file_2 = NULL, *key_file_ret = NULL</div><div class="line"><a class="code" href="libeconf_8h.html#a30cb4e6c5ce4daa333646b23b20caa0a">econf_err</a> error;</div><div class="line"></div><div class="line">error = <a class="code" href="libeconf_8h.html#aa03377bd02882239b3342c095f916561">econf_readFile</a> (&amp;key_file1, <span class="stringliteral">&quot;/usr/etc/test.conf&quot;</span>, <span class="stringliteral">&quot;=&quot;</span>, <span class="stringliteral">&quot;#&quot;</span>);</div><div class="line">error = <a class="code" href="libeconf_8h.html#aa03377bd02882239b3342c095f916561">econf_readFile</a> (&amp;key_file2, /etc/test.conf<span class="stringliteral">&quot;, &quot;</span>=<span class="stringliteral">&quot;, &quot;</span>#<span class="stringliteral">&quot;);</span></div><div class="line"><span class="stringliteral">error = econf_mergeFiles (&amp;key_file_ret, key_file_1, key_file_2);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">econf_free (key_file_ret);</span></div><div class="line"><span class="stringliteral">econf_free (key_file_1);</span></div><div class="line"><span class="stringliteral">econf_free (key_file_2);</span></div></div><!-- fragment --> 
+<p>Usage: </p><div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="libeconf_8h.html">libeconf.h</a>&quot;</span></div><div class="line"></div><div class="line"><a class="code" href="libeconf_8h.html#a0d29e6d5c6c6d151bb3edc54019c8735">econf_file</a> *key_file_1 = NULL, *key_file_2 = NULL, *key_file_ret = NULL</div><div class="line"><a class="code" href="libeconf_8h.html#a30cb4e6c5ce4daa333646b23b20caa0a">econf_err</a> error;</div><div class="line"></div><div class="line">error = <a class="code" href="libeconf_8h.html#aa03377bd02882239b3342c095f916561">econf_readFile</a> (&amp;key_file1, <span class="stringliteral">&quot;/usr/share/defaults/etc/test.conf&quot;</span>, <span class="stringliteral">&quot;=&quot;</span>, <span class="stringliteral">&quot;#&quot;</span>);</div><div class="line">error = <a class="code" href="libeconf_8h.html#aa03377bd02882239b3342c095f916561">econf_readFile</a> (&amp;key_file2, /etc/test.conf<span class="stringliteral">&quot;, &quot;</span>=<span class="stringliteral">&quot;, &quot;</span>#<span class="stringliteral">&quot;);</span></div><div class="line"><span class="stringliteral">error = econf_mergeFiles (&amp;key_file_ret, key_file_1, key_file_2);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">econf_free (key_file_ret);</span></div><div class="line"><span class="stringliteral">econf_free (key_file_1);</span></div><div class="line"><span class="stringliteral">econf_free (key_file_2);</span></div></div><!-- fragment --> 
 </div>
 </div>
 <a id="a7ff92b0fb657aa21220a89a0fcb59227"></a>
@@ -559,11 +559,11 @@ Functions</h2></td></tr>
       </table>
 </div><div class="memdoc">
 
-<p>Evaluating key/values of a given configuration by reading and merging all needed/available files in two different directories (normally in /usr/etc and /etc). </p>
+<p>Evaluating key/values of a given configuration by reading and merging all needed/available files in two different directories (normally in /usr/share/defaults/etc and /etc). </p>
 <dl class="params"><dt>Parameters</dt><dd>
   <table class="params">
     <tr><td class="paramname">key_file</td><td>content of parsed file(s) </td></tr>
-    <tr><td class="paramname">usr_conf_dir</td><td>absolute path of the first directory (normally "/usr/etc") </td></tr>
+    <tr><td class="paramname">usr_conf_dir</td><td>absolute path of the first directory (normally "/usr/share/defaults/etc") </td></tr>
     <tr><td class="paramname">etc_conf_dir</td><td>absolute path of the second directory (normally "/etc") </td></tr>
     <tr><td class="paramname">project_name</td><td>basename of the configuration file </td></tr>
     <tr><td class="paramname">config_suffix</td><td>suffix of the configuration file. Can also be NULL. </td></tr>
@@ -573,7 +573,7 @@ Functions</h2></td></tr>
   </dd>
 </dl>
 <dl class="section return"><dt>Returns</dt><dd>econf_err ECONF_SUCCESS or error code</dd></dl>
-<p>Example: Reading content of example.conf in /usr/etc and /etc directory. </p><div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="libeconf_8h.html">libeconf.h</a>&quot;</span></div><div class="line"></div><div class="line"><a class="code" href="libeconf_8h.html#a0d29e6d5c6c6d151bb3edc54019c8735">econf_file</a> *key_file = NULL;</div><div class="line"><a class="code" href="libeconf_8h.html#a30cb4e6c5ce4daa333646b23b20caa0a">econf_err</a> error;</div><div class="line"></div><div class="line">error = <a class="code" href="libeconf_8h.html#a7ff92b0fb657aa21220a89a0fcb59227">econf_readDirs</a> (&amp;key_file,</div><div class="line">                        <span class="stringliteral">&quot;/usr/etc&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;/etc&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;example&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;conf&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;=&quot;</span>, <span class="stringliteral">&quot;#&quot;</span>);</div><div class="line"></div><div class="line"><a class="code" href="libeconf_8h.html#a27a9d78ae827ef885a4373fa591ded73">econf_free</a> (key_file);</div></div><!-- fragment --> 
+<p>Example: Reading content of example.conf in /usr/share/defaults/etc and /etc directory. </p><div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="libeconf_8h.html">libeconf.h</a>&quot;</span></div><div class="line"></div><div class="line"><a class="code" href="libeconf_8h.html#a0d29e6d5c6c6d151bb3edc54019c8735">econf_file</a> *key_file = NULL;</div><div class="line"><a class="code" href="libeconf_8h.html#a30cb4e6c5ce4daa333646b23b20caa0a">econf_err</a> error;</div><div class="line"></div><div class="line">error = <a class="code" href="libeconf_8h.html#a7ff92b0fb657aa21220a89a0fcb59227">econf_readDirs</a> (&amp;key_file,</div><div class="line">                        <span class="stringliteral">&quot;/usr/share/defaults/etc&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;/etc&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;example&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;conf&quot;</span>,</div><div class="line">                        <span class="stringliteral">&quot;=&quot;</span>, <span class="stringliteral">&quot;#&quot;</span>);</div><div class="line"></div><div class="line"><a class="code" href="libeconf_8h.html#a27a9d78ae827ef885a4373fa591ded73">econf_free</a> (key_file);</div></div><!-- fragment --> 
 </div>
 </div>
 <a id="a55faa39cd3887073d1aaba364bd09f94"></a>
@@ -638,13 +638,13 @@ Functions</h2></td></tr>
       </table>
 </div><div class="memdoc">
 
-<p>Evaluating key/values for every given configuration files in two different directories (normally in /usr/etc and /etc). </p>
+<p>Evaluating key/values for every given configuration files in two different directories (normally in /usr/share/defaults/etc and /etc). </p>
 <p>Returns a list of read configuration files and their values.</p>
 <dl class="params"><dt>Parameters</dt><dd>
   <table class="params">
     <tr><td class="paramname">key_files</td><td>list of parsed file(s). Each entry includes all key/value, path, comments,... information of the regarding file. </td></tr>
     <tr><td class="paramname">size</td><td>Size of the evaluated key_files list. </td></tr>
-    <tr><td class="paramname">usr_conf_dir</td><td>absolute path of the first directory (normally "/usr/etc") </td></tr>
+    <tr><td class="paramname">usr_conf_dir</td><td>absolute path of the first directory (normally "/usr/share/defaults/etc") </td></tr>
     <tr><td class="paramname">etc_conf_dir</td><td>absolute path of the second directory (normally "/etc") </td></tr>
     <tr><td class="paramname">project_name</td><td>basename of the configuration file </td></tr>
     <tr><td class="paramname">config_suffix</td><td>suffix of the configuration file. Can also be NULL. </td></tr>
diff --git a/example/example.c b/example/example.c
index 19c0d8d..dcc9aa0 100644
--- a/example/example.c
+++ b/example/example.c
@@ -40,7 +40,7 @@ int main(void) {
 
   econf_file *key_file;
 
-  if (econf_readDirs(&key_file, "example/usr/etc", "example/etc",
+  if (econf_readDirs(&key_file, "example/usr/share/defaults/etc", "example/etc",
 				"example", ".ini", "=", "#"))
     return 1; /* XXX better error handling */
 
diff --git a/include/libeconf.h b/include/libeconf.h
index f85e12b..36bfb0a 100644
--- a/include/libeconf.h
+++ b/include/libeconf.h
@@ -215,7 +215,7 @@ extern econf_err econf_readFileWithCallback(econf_file **result, const char *fil
  *   econf_file *key_file_1 = NULL, *key_file_2 = NULL, *key_file_ret = NULL
  *   econf_err error;
  *
- *   error = econf_readFile (&key_file1, "/usr/etc/test.conf", "=", "#");
+ *   error = econf_readFile (&key_file1, "/usr/share/defaults/etc/test.conf", "=", "#");
  *   error = econf_readFile (&key_file2, /etc/test.conf", "=", "#");
  *   error = econf_mergeFiles (&key_file_ret, key_file_1, key_file_2);
  *
@@ -229,10 +229,10 @@ extern econf_err econf_mergeFiles(econf_file **merged_file,
 				  econf_file *usr_file, econf_file *etc_file);
 
 /** @brief Evaluating key/values of a given configuration by reading and merging all
- *         needed/available files in two different directories (normally in /usr/etc and /etc).
+ *         needed/available files in two different directories (normally in /usr/share/defaults/etc and /etc).
  *
  * @param key_file content of parsed file(s)
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
  * @param project_name basename of the configuration file
  * @param config_suffix suffix of the configuration file. Can also be NULL.
@@ -242,7 +242,7 @@ extern econf_err econf_mergeFiles(econf_file **merged_file,
  * @param comment array of characters which define the start of a comment
  * @return econf_err ECONF_SUCCESS or error code
  *
- * Example: Reading content of example.conf in /usr/etc and /etc directory.
+ * Example: Reading content of example.conf in /usr/share/defaults/etc and /etc directory.
  * @code
  *   #include "libeconf.h"
  *
@@ -250,7 +250,7 @@ extern econf_err econf_mergeFiles(econf_file **merged_file,
  *   econf_err error;
  *
  *   error = econf_readDirs (&key_file,
- *                           "/usr/etc",
+ *                           "/usr/share/defaults/etc",
  *                           "/etc",
  *                           "example",
  *                           "conf",
@@ -269,13 +269,13 @@ extern econf_err econf_readDirs(econf_file **key_file,
 				const char *comment);
 
 /** @brief Evaluating key/values for every given configuration files in two different
- *  directories (normally in /usr/etc and /etc). For each parsed file the user defined function
+ *  directories (normally in /usr/share/defaults/etc and /etc). For each parsed file the user defined function
  *  will be called in order e.g. to check the correct file permissions.
  *
  * @param key_files list of parsed file(s).
  *        Each entry includes all key/value, path, comments,... information of the regarding file.
  * @param size Size of the evaluated key_files list.
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
  * @param project_name basename of the configuration file
  * @param config_suffix suffix of the configuration file. Can also be NULL.
@@ -289,7 +289,7 @@ extern econf_err econf_readDirs(econf_file **key_file,
  * @param callback_data pointer which will be given to the callback function.
  * @return econf_err ECONF_SUCCESS or error code
  *
- * Example: Reading content of example.conf in /usr/etc and /etc directory.
+ * Example: Reading content of example.conf in /usr/share/defaults/etc and /etc directory.
  * @code
  *   #include "libeconf.h"
  *
@@ -302,7 +302,7 @@ extern econf_err econf_readDirs(econf_file **key_file,
  *   econf_err error;
  *
  *   error = econf_readDirsWithCallback (&key_file,
- *                                       "/usr/etc",
+ *                                       "/usr/share/defaults/etc",
  *                                       "/etc",
  *                                       "example",
  *                                       "conf",
@@ -325,13 +325,13 @@ extern econf_err econf_readDirs(econf_file **key_file,
 					     const void *callback_data);
 
 /** @brief Evaluating key/values for every given configuration files in two different
- *  directories (normally in /usr/etc and /etc). Returns a list of read configuration
+ *  directories (normally in /usr/share/defaults/etc and /etc). Returns a list of read configuration
  *  files and their values.
  *
  * @param key_files list of parsed file(s).
  *        Each entry includes all key/value, path, comments,... information of the regarding file.
  * @param size Size of the evaluated key_files list.
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
  * @param project_name basename of the configuration file
  * @param config_suffix suffix of the configuration file. Can also be NULL.
@@ -352,14 +352,14 @@ extern econf_err econf_readDirsHistory(econf_file ***key_files,
 				       const char *comment);
 
 /** @brief Evaluating key/values for every given configuration files in two different
- *  directories (normally in /usr/etc and /etc). For each parsed file the user defined function
+ *  directories (normally in /usr/share/defaults/etc and /etc). For each parsed file the user defined function
  *  will be called in order e.g. to check the correct file permissions.
  *  Returns a list of read configuration files and their values.
  *
  * @param key_files list of parsed file(s).
  *        Each entry includes all key/value, path, comments,... information of the regarding file.
  * @param size Size of the evaluated key_files list.
- * @param usr_conf_dir absolute path of the first directory (normally "/usr/etc")
+ * @param usr_conf_dir absolute path of the first directory (normally "/usr/share/defaults/etc")
  * @param etc_conf_dir absolute path of the second directory (normally "/etc")
  * @param project_name basename of the configuration file
  * @param config_suffix suffix of the configuration file. Can also be NULL.
diff --git a/lib/libeconf.c b/lib/libeconf.c
index 3d2a024..69279df 100644
--- a/lib/libeconf.c
+++ b/lib/libeconf.c
@@ -345,10 +345,10 @@ econf_err econf_readDirsHistoryWithCallback(econf_file ***key_files,
     }
 
   if (etcfile && !error) {
-    /* /etc/<project_name>.<suffix> does exist, ignore /usr/etc/<project_name>.<suffix> */
+    /* /etc/<project_name>.<suffix> does exist, ignore /usr/share/defaults/etc/<project_name>.<suffix> */
     *size = 1;
   } else {
-    /* /etc/<project_name>.<suffix> does not exist, so read /usr/etc */
+    /* /etc/<project_name>.<suffix> does not exist, so read /usr/share/defaults/etc */
     if (distfile)
       {
         error = econf_readFileWithCallback(&key_file, distfile, delim, comment,
@@ -357,7 +357,7 @@ econf_err econf_readDirsHistoryWithCallback(econf_file ***key_files,
 	  return error;
       }
 
-    if (distfile && !error) /* /usr/etc/<project_name>.<suffix> does exist */
+    if (distfile && !error) /* /usr/share/defaults/etc/<project_name>.<suffix> does exist */
       *size = 1;
   }
 
@@ -406,7 +406,7 @@ econf_err econf_readDirsHistoryWithCallback(econf_file ***key_files,
   configure_dirs[conf_count+1] = NULL;
 
   int i = 0;
-  /* merge all files in e.g. /usr/etc and /etc */
+  /* merge all files in e.g. /usr/share/defaults/etc and /etc */
   default_dirs[0] = dist_conf_dir;
   default_dirs[1] = etc_conf_dir;
   while (default_dirs[i]) {
diff --git a/lib/mergefiles.c b/lib/mergefiles.c
index 393d953..f9c5076 100644
--- a/lib/mergefiles.c
+++ b/lib/mergefiles.c
@@ -238,7 +238,7 @@ econf_err merge_econf_files(econf_file **key_files, econf_file **merged_files) {
 
     /* key_files are already sorted. If there is a file with the same name with
        a higher priority, the current file will be ignored. 
-       e.g. /usr/etc/shells.d/tcsh will not be merged if /etc/shells.d/tcsh exists.
+       e.g. /usr/share/defaults/etc/shells.d/tcsh will not be merged if /etc/shells.d/tcsh exists.
     */
     while (*double_key_files) {
       char * compare_file = basename((*double_key_files)->path);
diff --git a/util/econftool.c b/util/econftool.c
index 37eda1c..4c13853 100644
--- a/util/econftool.c
+++ b/util/econftool.c
@@ -44,7 +44,7 @@ static char conf_filename[PATH_MAX] = {0}; /* the filename including the suffix
 static char conf_path[PATH_MAX] = {0}; /* the path concatenated with the filename and the suffix */
 static char xdg_config_dir[PATH_MAX] = {0};
 static char root_dir[PATH_MAX] = "/etc";
-static char usr_root_dir[PATH_MAX] = "/usr/etc";
+static char usr_root_dir[PATH_MAX] = "/usr/share/defaults/etc";
 
 /**
  * @brief Shows the usage.
@@ -57,7 +57,7 @@ static void usage(void)
     fprintf(stderr, "Otherwise different files in /etc /usr/vendor and */<filename>.suffix.d/\n");
     fprintf(stderr, "directories will be parsed.\n\n");
     fprintf(stderr, "COMMANDS:\n");
-    fprintf(stderr, "show     reads all snippets for <filename>.conf (in /usr/etc and /etc),\n");
+    fprintf(stderr, "show     reads all snippets for <filename>.conf (in /usr/share/defaults/etc and /etc),\n");
     fprintf(stderr, "         and prints all groups,keys and their values.\n");
     fprintf(stderr, "         The root directories is /. It can be set by the environment\n");
     fprintf(stderr, "         variable $ECONFTOOL_ROOT \n");
-- 
2.42.0

